@page "/GPUs"

@using GPUTestAnalysisFeb5.Components.Shared
@using GPUTestAnalysisFeb5.Shared.Entity
@using GPUTestAnalysisFeb5.Shared.Services
@using GPUTestAnalysisFeb5.Shared
@using GPUTestAnalysisFeb5.Client.Pages

@inject IGPUService GPUService
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<div>
    <PageTitle>GPU Catalog</PageTitle>
    <h3>GPU Catalog</h3>
</div>

@if(gpus == null)
{
    <span>Loading...</span>
}
else if (gpus.Count == 0)
{
    <span>No GPUs found.</span>
}
else
{
    <div>
        <button class="btn btn-outline-primary" @onclick="(() => CreateGPU())">Create GPU</button>
    </div>
    <br />

    <DeleteGPU GPU="@currentGPU" OnClose="@OnDeleteModalClose">
    </DeleteGPU>

    <table id="allgpus" class="table table-striped table-bordered table-hover">
        <thead class="table-dark">
            <th>Id</th>
            <th>GPU</th>
            <th>Parameter</th>
            <th>Expression</th>
            <th>Description</th>
            <th></th>
        </thead>
        <tbody>
            @foreach (var gpu in gpus)
            {
                <tr> 
                    <td>@gpu.Id</td>
                    <td>@gpu.Type</td>
                    <td>@gpu.Parameter</td>
                    <td>@gpu.Expression</td>
                    <td>@gpu.Description</td>
                    <td>
                        <button class="btn btn-primary" @onclick="(() => EditGPU(gpu.Id))">Edit</button>
                        <button class="btn btn-danger"
                            data-bs-toggle="modal"
                            data-bs-target="#deleteModal"
                            @onclick="(() => currentGPU = gpu)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    List<GPU>? gpus = new();
    private GPU? currentGPU;

    protected override void OnInitialized()
    {
        gpus = GPUService.GetAllGPUs();
    }

    private void CreateGPU()
    {
        NavigationManager.NavigateTo("/AddGPU");
    }

    private void Test()
    {
        NavigationManager.NavigateTo("/editgpu");
    }

    private void EditGPU(int id)
    {
        NavigationManager.NavigateTo($"/editgpu/{id}");
    }

    private void OnDeleteModalClose(bool accepted)
    {
        if(accepted)
        {
            GPUService.DeleteGPU(currentGPU!.Id);
            gpus = GPUService.GetAllGPUs();
        }
    }
}
