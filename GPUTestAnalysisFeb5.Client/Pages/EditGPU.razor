@page "/editgpu"
@page "/editgpu/{id:int}"

@using GPUTestAnalysisFeb5.Shared.Entity
@using GPUTestAnalysisFeb5.Shared.Services
@using Microsoft.AspNetCore.Components.Forms

@inject IGPUService GPUService

@rendermode InteractiveAuto

@if(id == null)
{
    <h3>Create a GPU</h3>
}
else
{
    <h3>Edit @gpu.Type</h3>
}

<EditForm Model="gpu" OnSubmit="HandleSubmit" class="col-3">
    <label class="form-label">Type: </label>
    <InputText class="form-control" placeholder="GPU Type" @bind-Value="gpu.Type">@gpu.Type</InputText>
    <br />
    <label class="form-label">Parameter: </label>
    <InputText class="form-control" placeholder="GPU Parameter" @bind-Value="gpu.Parameter">@gpu.Parameter</InputText>
    <br />
    <label class="form-label">Expression: </label>
    <InputText class="form-control" placeholder="GPU Expression" @bind-Value="gpu.Expression">@gpu.Expression</InputText>
    <br />
    <label class="form-label">Description: </label>
    <InputText class="form-control" placeholder="GPU Description" @bind-Value="gpu.Destription">@gpu.Destription</InputText>
    <br />
    <button type="submit" class="btn btn-primary">Submit</button>
    @if(id != null)
    {
        <button @onclick="DeleteGPU" type="button" class="btn btn-danger">Delete</button>
    }
</EditForm>

@code {
    [Parameter]
    public int? id { get; set; }

    GPU gpu { get; set; } = new GPU { Type = string.Empty, Parameter = string.Empty, Expression = string.Empty, Destription = string.Empty };

    protected override async Task OnParametersSetAsync()
    {
        if(id > 0)
        {
            gpu = await GPUService.GetGPUById((int)id);
        }
    }

    async Task HandleSubmit()
    {
        if(id == null)
        {
            await GPUService.AddGPU(gpu);
        }
        else
        {
            await GPUService.EditGPU((int)id, gpu);
        }

    }

    async Task DeleteGPU()
    {
        await GPUService.DeleteGPU((int)id);
    }
}
