@page "/editgpu"
@page "/editgpu/{id:int}"

@using GPUTestAnalysisFeb5.Shared.Entity
@using GPUTestAnalysisFeb5.Shared.Services
@using Microsoft.AspNetCore.Components.Forms

@inject IGPUService GPUService
@inject NavigationManager NavigationManager

@rendermode InteractiveAuto

@if(id == null)
{
    <PageTitle>@title</PageTitle>
    <h3>@title</h3>
    //<h3>Create a new GPU</h3>
}
else
{
    <PageTitle>@title</PageTitle>
    <h1>Creating a new GPU</h1>
    <h3>@title</h3>
}

<div class="row">
    <div class="col-sm-4">
        <EditForm Model="@gpu" OnSubmit="HandleSubmit">
            <div class="mb-3">
                <label for="type"class="form-label">Type:</label>
                <InputText id="type" @bind-Value="gpu.Type" class="form-control" placeholder="GPU Type" >@gpu.Type</InputText>
            </div>
            <div class="mb-3">
                <label for="parameter" class="form-label">Parameter:</label>
                <InputText id="parameter" @bind-Value="gpu.Parameter" class="form-control" placeholder="GPU Parameter">@gpu.Parameter</InputText>
            </div>
            <div class="mb-3">
                <label for="expression" class="form-label">Expression:</label>
                <InputText id="expression" @bind-Value="gpu.Expression" class="form-control" placeholder="GPU Expression">@gpu.Expression</InputText>
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label>
                <InputText id="description" @bind-Value="gpu.Destription" class="form-control" placeholder="GPU Description">@gpu.Destription</InputText>
            </div>

            @if (id != null)
            {
                <button @onclick="DeleteGPU" type="button" class="btn btn-danger">Delete</button>
            }

            <button type="submit" class="btn btn-primary">Save</button>
            <button type="button" class="btn btn-secondary" @onclick="@Cancel">Cancel</button>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public int? id { get; set; }

    GPU gpu { get; set; } = new GPU { Type = string.Empty, Parameter = string.Empty, Expression = string.Empty, Destription = string.Empty };

    private string title = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        if(id > 0)
        {
            gpu = await GPUService.GetGPUById((int)id);
        }
    }

    private void HandleSubmit()
    {
        if(id == null)
        {
            GPUService.AddGPU(gpu);
            NavigationManager.NavigateTo("/GPUs");
            title = "New GPU";
        }
        else
        {
            GPUService.EditGPU((int)id, gpu);
            title = $"Edit {gpu.Type}";
        }

    }

    async Task DeleteGPU()
    {
        await GPUService.DeleteGPU((int)id);
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/GPUs");
    }
}
